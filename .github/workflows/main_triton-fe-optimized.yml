# Optimized Azure Web App deployment workflow for Vue 3 + Vite
# This version implements advanced best practices for faster, more secure deployments

name: Optimized Build and Deploy - Triton-FE

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

# Global environment variables
env:
  AZURE_WEBAPP_NAME: 'Triton-FE'
  NODE_VERSION: '22.x'
  AZURE_WEBAPP_PACKAGE_PATH: '.'

# Set default permissions (security best practice)
permissions:
  contents: read

jobs:
  # Separate job for linting and testing (runs in parallel with build)
  quality-checks:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js with caching
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint --if-present

      - name: Run tests
        run: npm run test --if-present

  build:
    name: Build Application
    runs-on: ubuntu-latest
    # Only run on main branch pushes or workflow_dispatch
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    outputs:
      build-cache-hit: ${{ steps.build-cache.outputs.cache-hit }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js with caching
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      # Advanced build caching strategy
      - name: Cache build outputs
        id: build-cache
        uses: actions/cache@v4
        with:
          path: |
            dist
            .vite/deps
          key: build-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('src/**/*', 'public/**/*', 'index.html', 'vite.config.*', 'tailwind.config.js', 'postcss.config.js') }}
          restore-keys: |
            build-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-
            build-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: Build application
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: npm run build
        env:
          NODE_ENV: production
          # Add any build-time environment variables here
          VITE_APP_VERSION: ${{ github.sha }}

      # Create optimized deployment package (source code only, let Azure build)
      - name: Prepare source-only deployment package
        run: |
          # Create a clean deployment package with only source files
          mkdir -p deployment-package
          
          # Copy essential files for Azure to build the app
          cp package.json package-lock.json deployment-package/
          cp -r src deployment-package/ 2>/dev/null || echo "No src folder"
          cp -r public deployment-package/ 2>/dev/null || echo "No public folder"
          cp index.html deployment-package/ 2>/dev/null || echo "No index.html"
          cp vite.config.* deployment-package/ 2>/dev/null || echo "No vite config"
          cp tailwind.config.js deployment-package/ 2>/dev/null || echo "No tailwind config"
          cp postcss.config.js deployment-package/ 2>/dev/null || echo "No postcss config"
          cp jsconfig.json deployment-package/ 2>/dev/null || echo "No jsconfig"
          
          # Copy any server files if they exist
          [ -f server.js ] && cp server.js deployment-package/
          [ -f vercel.json ] && cp vercel.json deployment-package/
          
          # Create .deployment file to tell Azure how to build
          cat > deployment-package/.deployment << 'EOF'
          [config]
          command = npm ci && npm run build
          EOF

      - name: Create deployment artifact
        run: |
          cd deployment-package
          zip -r ../source-package.zip . -x "*.git*" "node_modules/*" "*.md" ".env*"

      - name: Upload source package
        uses: actions/upload-artifact@v4
        with:
          name: source-package
          path: source-package.zip
          retention-days: 1

  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    permissions:
      id-token: write # Required for OIDC authentication
      contents: read

    steps:
      - name: Download source package
        uses: actions/download-artifact@v4
        with:
          name: source-package

      - name: Extract source package
        run: unzip source-package.zip

      - name: Login to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_342D948E1B9F4F649BFAF65335B9F8F6 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_6E6C98CA3E72424D9E3D170E967BB67D }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_3C50D9DC2D2249FBA4AA8410621AE3A7 }}

      # Optional: Configure Azure App Service settings for optimal Node.js performance
      - name: Configure App Service settings
        run: |
          az webapp config appsettings set \
            --resource-group $(az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --query resourceGroup -o tsv) \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --settings \
              SCM_DO_BUILD_DURING_DEPLOYMENT=true \
              ENABLE_ORYX_BUILD=true \
              NODE_ENV=production \
              WEBSITE_NODE_DEFAULT_VERSION=${{ env.NODE_VERSION }} \
              WEBSITE_RUN_FROM_PACKAGE=1

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'Production'
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: Azure logout
        if: always()
        run: az logout

  # Cleanup job to remove old artifacts and caches
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    
    permissions:
      actions: write # Required to delete artifacts
    
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name === 'source-package') {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            } 