---
description: 
globs: 
alwaysApply: true
---
# Frontend Guideline Document

This document explains how the Triton-v3 frontend is built and organized. It covers the architecture, design principles, styling, component structure, state management, routing, performance tips, and testing guidelines. By following these guidelines, anyone can understand or contribute to the frontend, even without deep technical expertise.

## 1. Frontend Architecture

### Overview
- **Framework & Build Tool**: We use Vue.js 3 (Composition API) for building interactive pages, and Vite as our fast development server and bundler.
- **Component Library**: PrimeVue provides ready-made UI components (buttons, tables, dialogs) so we don’t reinvent the wheel.
- **State Management**: Pinia keeps shared data (like user info or cart contents) in one place, avoiding prop-drilling.
- **HTTP Layer**: Axios handles calls to our backend API for logging in, fetching data, and saving changes.
- **CSS & Theming**: Tailwind CSS (utility-first) plus Sass for custom styles, with support for light/dark themes.
- **Charts & Rich Text**: Chart.js renders interactive graphs; Quill provides a rich-text editor in blog and document screens.

### How It Supports Scalability, Maintainability, and Performance
- **Scalability**: Modular folder structure and component-based design let you add new features or swap out pieces without touching unrelated code.
- **Maintainability**: Using well-documented libraries (PrimeVue, Pinia) and clear naming conventions makes it easy for new developers to jump in.
- **Performance**: Vite’s code-splitting and hot-reload, plus lazy loading of routes, ensure fast load times and snappy navigation.

## 2. Design Principles

1. **Usability**: Clean layouts and intuitive controls—buttons look like buttons, forms guide you with labels and helper text.
2. **Accessibility**: We follow WCAG AA guidelines: semantic HTML, meaningful alt text, keyboard navigation, sufficient color contrast.
3. **Responsiveness**: Tailwind’s responsive utilities ensure the app works on phones, tablets, and desktops.
4. **Consistency**: PrimeVue components plus a shared color palette and typography keep the look and feel uniform.
5. **Clarity**: Error messages, loading indicators, and confirmation dialogs make sure users always know what’s happening.

## 3. Styling and Theming

### Styling Approach
- **Utility-First**: Tailwind CSS classes (e.g., `flex`, `p-4`, `text-gray-700`) handle most layouts and spacing.
- **Scoped Sass**: For component-specific tweaks, we use Sass with variables and nesting to keep styles organized.

### Theming
- **Light & Dark Modes**: Toggle via a global setting in Pinia; Tailwind’s `dark:` variants switch colors.
- **PrimeVue Themes**: We import `@primeuix/themes` and use `tailwindcss-primeui` to align PrimeVue components with our design.

### Visual Style
- **Overall Style**: Modern flat design with subtle shadows and smooth transitions. Occasional glassmorphism (frosted panels) in dashboards for visual depth.
- **Typography**: “Inter”, a clean and readable sans-serif font across headings and body text.

### Color Palette
| Role       | Light Mode     | Dark Mode       |
| ---------- | -------------- | --------------- |
| Primary    | #007AD9        | #3399FF         |
| Secondary  | #6C757D        | #A2A9B1         |
| Accent     | #E91E63        | #FF6090         |
| Success    | #28A745        | #39D353         |
| Warning    | #FFC107        | #FFD454         |
| Danger     | #DC3545        | #E66775         |
| Info       | #17A2B8        | #3AB1C1         |
| Background | #F8F9FA        | #1E1E2D         |
| Surface    | #FFFFFF        | #2A2A3C         |
| Text       | #212529        | #E0E0E0         |

## 4. Component Structure

- **Folder Layout**:
  - `/src/components/` – reusable UI pieces (buttons, cards, modals)
  - `/src/layouts/` – page wrappers (MainLayout, AuthLayout, LandingLayout)
  - `/src/views/` – feature pages (DashboardView, BlogView, CartView)
  - `/src/stores/` – Pinia stores (auth, user, products, invoices)
  - `/src/router/` – route definitions and guards
  - `/src/services/` – API calls and business logic

- **Reusability**: Each component does one thing well. Common UI elements (e.g., `BaseButton.vue`) live in `components/` and are imported wherever needed.
- **Single-File Components**: `.vue` files bundle template, script, and style, making each piece self-contained.

**Why Component-Based?**
- Easier to test, update, and replace.
- Reduces duplication—write once, use everywhere.
- Clear boundaries improve collaboration between designers and developers.

## 5. State Management

- **Pinia Stores**:
  - `useAuthStore` – user info, tokens, login/logout actions
  - `usePermissionStore` – roles, permissions, guard checks
  - `useCartStore` – shopping cart items and totals
  - `useUiStore` – theme (light/dark), notifications queue

- **Data Flow**: Components dispatch actions (`store.login()`), read state (`store.userName`), and react to changes automatically.
- **Shared State**: No need to pass props deep or bubble events—Pinia makes state accessible anywhere.

## 6. Routing and Navigation

- **Vue Router** handles page navigation without reloads.
- **Route Definitions**:
  - Nested under layouts: e.g., under `MainLayout`, we have routes for dashboards, apps, e-commerce.
  - Public vs. Protected: Routes marked with `meta.requiresAuth` and `meta.permissions`.
- **PermissionGuard**: A global `beforeEach` hook checks if a user is logged in and has the required permissions. If not, it redirects to login or shows a “Not Authorized” page.
- **Dynamic Imports**: Each view is loaded with `() => import('...')`, enabling lazy loading.

## 7. Performance Optimization

1. **Code Splitting & Lazy Loading**: Vite automatically splits code by dynamic imports—only load what the user needs.
2. **Tree-Shaking**: Unused code from libraries is dropped in the final bundle.
3. **CSS Purge**: Tailwind removes unused styles in production builds, keeping CSS lean.
4. **Image & Asset Optimization**: Serve optimized images (WebP), use a CDN for static files.
5. **Caching**: HTTP caching headers and short-term Pinia cache for API responses reduce redundant network calls.
6. **Minification & Compression**: JS and CSS are minified, and served over gzip or Brotli.

## 8. Testing and Quality Assurance

- **Unit Testing**:
  - **Vitest** for testing components and stores in isolation.
  - **Vue Testing Library** to render components and assert on DOM output.
- **End-to-End Testing**:
  - **Cypress** for full-flow tests (e.g., login → dashboard → logout).
- **Linting & Formatting**:
  - **ESLint** with Vue and TypeScript plugins enforces code style.
  - **Prettier** auto-formats code on save.
  - **Lint-Staged** runs linters on staged files before commits.
- **Continuous Integration**:
  - GitHub Actions runs lint, tests, and build on every pull request.

## 9. Conclusion and Overall Frontend Summary

Triton-v3’s frontend uses modern, widely supported tools—Vue 3, Vite, PrimeVue, Pinia, and Tailwind—to deliver a fast, accessible, and maintainable application. Key takeaways:

- **Modular Architecture**: Clear separation of components, views, stores, and services.
- **Consistent Design**: A shared color palette, typography, and PrimeVue components ensure uniform UI.
- **Scalable State & Routing**: Pinia and Vue Router with permission guards power complex flows without confusion.
- **Performance-First**: Lazy loading, tree-shaking, and asset optimization keep load times low.
- **Quality Assurance**: Automated tests, linting, and CI pipelines safeguard stability.

By following these guidelines, teams can confidently extend Triton-v3—adding new features, tweaking styles, or integrating third-party tools—while keeping the codebase clean, performant, and user-friendly.